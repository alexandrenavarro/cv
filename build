#!/bin/bash
set -e

DEBUG=${DEBUG:-false}
$DEBUG && set -x || set +x

LANGUAGE_DIR=${LANGUAGE_DIR:-en}
BASE_DIR=`cd "$(dirname "$0")"; pwd`
RELATIVE_DIR=${BASE_DIR##$BASE_DIR/}/$LANGUAGE_DIR

config=build.conf
[ -f "$BASE_DIR"/$config ] || config=$config.sample
source "$BASE_DIR"/$config

# called automatically when you invoke this script
check_prerequisites() {
  which asciidoctor > /dev/null || { echo "ERROR: install asciidoctor first!"; exit 1; }
  which w3m > /dev/null || { echo "ERROR: install w3m first!"; exit 1; }
  which lynx > /dev/null || { echo "ERROR: install lynx first!"; exit 1; }

  if $generate_pdf
  then
    if $use_fopub
    then
      [ -x "$fopub" ] || { echo "ERROR: can't execute $fopub!"; exit 1; }
    else
      which asciidoctor-pdf > /dev/null || { echo "ERROR: install asciidoctor-pdf first!"; exit 1; }
    fi
  fi
}

# used to remove generated docs (HTML and/or PDF)
_clean() {
  rm -f index.{html,xml}
  rm -f $pdf_name $xml_name
}

# used to build the main doc (HTML and/or PDF)
_build() {
  local result

  echo "Generating HTML ..."
  asciidoctor index.adoc
  result=$?

  _txt

  $generate_pdf || exit $result

  echo "Generating PDF ..."
  if $use_fopub
  then
    asciidoctor -b docbook -d book -a data-uri! index.adoc -o $xml_name
    $fopub $xml_name
  else
    asciidoctor-pdf -o $pdf_name index.adoc
  fi
}

# used to build the TXT version (cv.txt)
_txt() {
  if [ -f index.html ]
  then
    echo "Generating TXT ..."

    # Using w3m: (https://github.com/asciidoctor/asciidoctor/issues/1636#issuecomment-167700917)
    w3m -dump -cols 2147483647 index.html > cv.txt

    # Using lynx:
    #lynx -dump -width=1024 -nolist index.html > cv.txt

    # Using html-to-text (https://www.npmjs.com/package/html-to-text)
    #html-to-text < index.html > cv.txt

    # Using html2text (https://github.com/jaytaylor/html2text)
  fi
}

# used to publish the generated docs to GitHub Pages
_publish() {
  local published_dir=`mktemp -d`
  local remote_repo=`git config --get remote.origin.url`
  [ ".$remote_repo" = "." ] && {
    echo 'The remote repository is not configured!'
    return 1
  }

  mkdir -p "$published_dir"
  cd "$BASE_DIR"
  rsync -am \
    --include='**/' \
    --include='/pt-br/*.html' \
    --include='/pt-br/*.pdf' \
    --include='/pt-br/*.txt' \
    --include='/en/*.html' \
    --include='/en/*.pdf' \
    --include='/en/*.txt' \
    --include='/en/*.csv' \
    --exclude='*' \
    . "$published_dir"/
  cd - &> /dev/null
  tree -a "$published_dir"

  local msg="Published at `date`"
  cd "$published_dir"
  git init
  git add -A
  git commit -m "$msg"
  git push --force $remote_repo master:gh-pages
  cd - &> /dev/null
}

check_prerequisites
cd "$BASE_DIR/$LANGUAGE_DIR"
op=$1
[ "$op" ] || op=build
type _$op &> /dev/null || {
  echo "Usage: `basename $0` [build]|<clean|publish>"
  exit 1
}
_$op
